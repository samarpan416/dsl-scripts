<scraper name="shopifyGetSaleOrderListScript" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.unicommerce.com/schema/scraper-1.0.xsd" cachehttpclient="false">

	<!-- In this version we get order on basis of parameter created_at_min and fullfilment_status is fulfillment_status=unshipped,partial,null -->

	<log level="info" value="syncDraftOrders: #{#syncDraftOrders}" />
	<log level="info" value="Fetching page: #{#pageNumber}" />
	<var name="hasMoreOrders" value="#{false}" />
	<var name="dateFormat" value="yyyy-MM-dd%20HH:mm" />
	<var name="DAYS_TO_FETCH_ORDERS_FOR" value="#{30}" />
	<var name="createdAfter" value="#{T(com.unifier.core.utils.DateUtils).dateToString(T(com.unifier.core.utils.DateUtils).addToDate(T(com.unifier.core.utils.DateUtils).getCurrentDate(), 5, -1 * #DAYS_TO_FETCH_ORDERS_FOR),#dateFormat)}" />

	<method name="getPageInfo">
		<if condition="#{#link != null}">
			<var name="linkArray" value="#{#link.split(',')}" />
			<var name="relnext" value="#{ (#linkArray.length &gt; 1) ? #linkArray[1]: #linkArray[0] }" />
			<!-- extract  next page url from relnext -->
			<var name="pattern" value="#{'(?&lt;=page_info=)(.*)(?=&gt;; rel=&#34;next&#34;)'}" /> <!-- &#34; is for " (Quotation mark)-->
			<var name="matcher" value="#{T(java.util.regex.Pattern).compile(#pattern).matcher(#relnext)}" />
			<while condition="#{#matcher.find()}">
				<var name="pageInfo" value="#{#matcher.group()}" />
			</while>
		</if>
	</method>

	<if condition="#{#applicableProvinceCodes != null}">
		<try>
			<var name="provinces" value="#{#applicableProvinceCodes.split(',')}" />
			<var name="allowedProvinceCodesList" value="#{new java.util.ArrayList()}" />
			<var value="#{#allowedProvinceCodesList.addAll(#provinces)}" />
			<catch>
				<scriptError message="Invalid applicableProvinceCodes: #{#applicableProvinceCodes}" />
			</catch>
		</try>
		<else>
			<var name="allowedProvinceCodesList" value="#{null}" />
		</else>
	</if>

	<var name="authHeadersAndUrl" value="#{new java.util.HashMap()}" />
	<var name="channelConnectorParams" value="#{new java.util.HashMap()}" />
	<var value="#{#channelConnectorParams.put('apiKey',#apiKey)}" />
	<var value="#{#channelConnectorParams.put('password',#password)}" />
	<var value="#{#channelConnectorParams.put('accessToken',#token)}" />
	<var value="#{#channelConnectorParams.put('hostname',#hostname)}" />

	<invoke method="getAuthHeadersAndUrl" script="shopifyUtils">
		<param name="channelConnectorParams" value="#{#channelConnectorParams}" />
		<param name="authHeadersAndUrl" value="#{#authHeadersAndUrl}" />
	</invoke>
	<var name="baseUrl" value="#{#authHeadersAndUrl.get('url')}" />
	<var name="authHeaders" value="#{#authHeadersAndUrl.get('authHeaders')}" />
	<log level="info" value="#{#TAG} baseUrl : #{#baseUrl}, authHeaders : #{#authHeaders.toString()}" />

	<if condition="#{#pageNumber eq 1}">
		<var name="getOrdersURL" value="#{#baseUrl}/orders.json?limit=200&amp;fulfillment_status=unshipped,partial,null&amp;created_at_min=#{#createdAfter}" />
		<else>
			<var name="getOrdersURL" value="#{#metadata.get('nextPageUrl')}" />
			<var value="#{#metadata.remove('nextPageUrl')}" />
		</else>
	</if>

	<http method="get" url="#{#getOrdersURL}" fetchResponseHeaders="true" var="saleOrderListResponse">
		<headers map="#{#authHeaders}" />
	</http>
	<log level="info" value="saleOrderListResponse: #{#saleOrderListResponse} , saleOrderListResponseHeaders: #{#saleOrderListResponseHeaders.toString()}" />
	<try>
		<var name="saleOrderListJson" value="#{T(com.unifier.core.utils.JsonUtils).stringToJson(#saleOrderListResponse)}" />
		<if condition="#{#saleOrderListJson.get('errors') != null}">
			<scriptError message="Unable to login with the given credentials, please check if username and password are correct" />
		</if>
		<catch>
			<scriptError message="Unable to login with the given credentials, please check if username and password are correct" />
		</catch>
	</try>

	<invoke method="getPageInfo">
		<param name="link" value="#{#saleOrderListResponseHeaders.get('Link')}" />
	</invoke>
	<!-- set next Page Url page info in metadata -->
	<if condition="#{T(com.unifier.core.utils.StringUtils).isNotBlank(#pageInfo)}">
		<var name="nextPageUrl" value="#{#baseUrl}/orders.json?limit=200&amp;page_info=#{#pageInfo}" />
		<var value="#{#metadata.put('nextPageUrl', #nextPageUrl)}" />
		<var name="hasMoreOrders" value="#{true}" />
	</if>

	<startTag name="SaleOrders" />
	<var name="saleOrderIterator" value="#{#saleOrderListJson.get('orders').getAsJsonArray().iterator()}" />
	<while condition="#{#saleOrderIterator.hasNext()}">
		<var name="saleOrderJson" value="#{#saleOrderIterator.next()}" />
		<var name="saleOrderCode" value="#{#saleOrderJson.get('id').getAsString()}" />
		<log level="info" value="[SHOPIFY] saleOrderCode : #{#saleOrderCode}" />
		<try>
			<var name="provinceCode" value="#{T(com.unifier.core.utils.JsonUtils).getAsString(#saleOrderJson.get('billing_address'),'province_code')}" />
			<catch>
				<log level="info" value="[SHOPIFY] saleOrderCode : #{#saleOrderCode}" />
			</catch>
		</try>
		<var name="isSaleOrderConfirmed" value="#{#saleOrderJson.get('confirmed').getAsBoolean()}" />
		<var name="fulfillmentStatus" value="#{T(com.unifier.core.utils.JsonUtils).getAsString(#saleOrderJson , 'fulfillment_status')}" />

		<if condition="#{
							#isSaleOrderConfirmed and 
							(
								#saleOrderJson.get('fulfillment_status').isJsonNull() or 
								#saleOrderJson.get('fulfillment_status').getAsString().equals('null') or 
								#saleOrderJson.get('fulfillment_status').getAsString().equals('partial')
							)
						}">
			<retry delayInMillis="500" count="3">
				<http method="get" url="#{#baseUrl}/orders/#{#saleOrderCode}/transactions.json" var="transactionsResponse">
					<headers map="#{#authHeaders}" />
				</http>
				<var name="transactionJson" value="#{T(com.unifier.core.utils.JsonUtils).stringToJson(#transactionsResponse).get('transactions')}" />
				<var name="saleOrderTransactionIterator" value="#{#transactionJson.getAsJsonArray().iterator()}" />
			</retry>

			<var name="cashOnDelivery" value="#{false}" />
			<var name="giftDiscount" value="#{T(java.math.BigDecimal).ZERO}" />
			<var name="partiallyPaidAmount" value="#{T(java.math.BigDecimal).ZERO}" />
			<var name="partiallyPaidTransactionFound" value="#{false}" />
			<var name="giftDiscountTransactionFound" value="#{false}" />
			<var name="financialStatus" value="#{T(com.unifier.core.utils.JsonUtils).getAsString(#saleOrderJson, 'financial_status')}" />

			<while condition="#{#saleOrderTransactionIterator.hasNext()}">
				<var name="saleOrderTransaction" value="#{#saleOrderTransactionIterator.next()}" />
				<log level="debug" value="saleOrderTransaction: #{#saleOrderTransaction.toString()}" />

				<var name="transactionId" value="#{#saleOrderTransaction.get('id').getAsString()}" />
				<var name="transactionStatus" value="#{#saleOrderTransaction.get('status').getAsString()}" />
				<var name="transactionGateway" value="#{T(com.unifier.core.utils.JsonUtils).getAsString(#saleOrderTransaction, 'gateway')}" />

				<if condition="#{
									!#saleOrderTransaction.get('gateway').isJsonNull() and 
									(
										#transactionStatus.toLowerCase().contains('pending') or 
										#transactionStatus.toLowerCase().contains('success')
									)
								}">
					<if condition="#{'partially_paid'.equalsIgnoreCase(#financialStatus)}">
						<var name="cashOnDelivery" value="#{true}" />
						<else>
							<if condition="#{
											#transactionGateway.contains('COD') or 
											#transactionGateway.toLowerCase().contains('cash on delivery') or 
											#transactionGateway.toLowerCase().contains('cash_on_delivery') or 
											(
												#syncDraftOrders=='true' and 
												#transactionGateway.toLowerCase().contains('manual')  and 
												!(
													!#saleOrderJson.get('financial_status').isJsonNull() and 
													#saleOrderJson.get('financial_status').getAsString().toLowerCase().equals('paid')
													)
													)
												}">
								<var name="cashOnDelivery" value="#{true}" />
								<else>
									<var name="cashOnDelivery" value="#{false}" />
								</else>
							</if>
						</else>
					</if>
					
					<if condition="#{'SUCCESS'.equalsIgnoreCase(#transactionStatus)}">
						<var name="transactionAmount" value="#{#saleOrderTransaction.get('amount').getAsBigDecimal()}" />
						<if condition="#{'gift_card'.equals(#transactionGateway)}">
							<var name="giftDiscountTransactionFound" value="#{true}" />
							<var name="transactionKind" value="#{#saleOrderTransaction.get('kind').getAsString()}" />
							<var name="giftDiscount" value="#{'REFUND'.equalsIgnoreCase(#transactionKind) ? #giftDiscount.subtract(#transactionAmount) : #giftDiscount.add(#transactionAmount)}" />
						</if>
						<if condition="#{'partially_paid'.equals(#transactionGateway)}">
							<var name="partiallyPaidTransactionFound" value="#{true}" />
							<var name="partiallyPaidAmount" value="#{#partiallyPaidAmount.add(#transactionAmount)}" />
						</if>
					</if>
					<else>
						<log level="info" value="saleOrderCode: #{#saleOrderCode} | Skipping transaction #{#transactionId} , transactionStatus: #{#transactionStatus} , transactionGateway: #{#transactionGateway}" />
					</else>
				</if>
			</while>

			<log level="info" value="saleOrderCode: #{#saleOrderCode} | cashOnDelivery: #{#cashOnDelivery} , giftDiscount: #{#giftDiscount} , partiallyPaidAmount: #{#partiallyPaidAmount} , giftDiscountTransactionFound: #{#giftDiscountTransactionFound} , partiallyPaidTransactionFound: #{#partiallyPaidTransactionFound}" />

			<if condition="#{'partially_paid'.equalsIgnoreCase(#financialStatus) and !#giftDiscountTransactionFound and !#partiallyPaidTransactionFound}">
				<log level="info" value="Skipping order #{#saleOrderCode} since no transaction found with gateway partially_paid or gift_card" />
				<else>
					<if condition="#{
								(
									#cashOnDelivery or 
									(
										!#saleOrderJson.get('financial_status').isJsonNull() and 
										#saleOrderJson.get('financial_status').getAsString().toLowerCase().equals('paid')
									)
								)  and 
								(
									#allowedProvinceCodesList == null or 
									#allowedProvinceCodesList.contains(#provinceCode)
								)
							}">
						<valueTag name="SaleOrder" value="#{#saleOrderCode}">
							<attribute name="cashOnDelivery" value="#{#cashOnDelivery}" />
							<attribute name="giftDiscount" value="#{#giftDiscount}" />
							<attribute name="partiallyPaidAmount" value="#{#partiallyPaidAmount}" />
						</valueTag>
						<var value="#{#resultItems.put(#saleOrderCode, #saleOrderJson.toString())}" />
						<else>
							<log level="info" value="[Invalid financial status] Skipping sale order #{#saleOrderCode} , financialStatus: #{#financialStatus}" />
						</else>
					</if>
				</else>
			</if>
			<else>
				<log level="info" value="[Invalid fulfillment status] Skipping sale order #{#saleOrderCode} , fulfillmentStatus: #{#fulfillmentStatus} , isSaleOrderConfirmed: #{#isSaleOrderConfirmed}" />
			</else>
		</if>
	</while>
	<if condition="#{#hasMoreOrders}">
		<valueTag name="TotalPages" value="#{#pageNumber + 1}" />
		<else>
			<valueTag name="TotalPages" value="#{#pageNumber}" />
		</else>
	</if>
	<endTag name="SaleOrders" />

</scraper>